# resume or fork a training from a checkpoint last.ckpt or specified in hardware.files.warm_start
run_id: null
fork_run_id: null
transfer_learning: False # activate to perform transfer learning
load_weights_only: False # only load model weights, do not restore optimiser states etc.

# run in deterministic mode ; slows down
deterministic: False

# miscellaneous
precision: 16-mixed

# multistep input
# 1 = single step scheme, X(t-1) used to predict X(t)
# k > 1: multistep scheme, uses [X(t-k), X(t-k+1), ... X(t-1)] to predict X(t)
# Deepmind use k = 2 in their model
multistep_input: 2

# gradient accumulation across K batches, K >= 1 (if K == 1 then no accumulation)
# the effective batch size becomes num-devices * batch_size * k
accum_grad_batches: 1

num_sanity_val_steps: 6

# clipp gradients, 0 : don't clip, default algorithm: norm, alternative: value
gradient_clip:
  val: 32.
  algorithm: value

# stochastic weight averaging
# https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/
swa:
  enabled: False
  lr: 1.e-4

# Optimizer settings
optimizer:
  zero: False # use ZeroRedundancyOptimizer ; saves memory for larger models
  kwargs:
    betas: [0.9, 0.95]

# select model
model_task: anemoi.training.train.forecaster.GraphForecasterMultiDataset

# select strategy
strategy:
  _target_: anemoi.training.distributed.strategy.DDPGroupStrategy
  num_gpus_per_model: ${hardware.num_gpus_per_model}
  read_group_size: ${dataloader.read_group_size}

# loss functions

# dynamic rescaling of the loss gradient
# see https://arxiv.org/pdf/2306.06079.pdf, section 4.3.2
# don't enable this by default until it's been tested and proven beneficial
loss_gradient_scaling: False

# length of the "rollout" window (see Keisler's paper)
rollout:
  start: 1
  # increase rollout every n epochs
  epoch_increment: 0
  # maximum rollout to use
  max: 1

# Set max_epochs or max_steps. Training stops at the first limit reached.
max_epochs: null
max_steps: 150000

lr:
  warmup: 1000 # number of warmup iterations
  rate: 0.625e-4 #local_lr
  iterations: ${training.max_steps} # NOTE: When max_epochs < max_steps, scheduler will run for max_steps
  min: 3e-7 #Not scaled by #GPU

output:
  era5: # Make it easier to set the same key name in different places of the config
    training_loss:
      _target_: anemoi.training.losses.mse.WeightedMSELoss
      scalars: ['variable', 'loss_weights_mask']
      ignore_nans: True
    output_mask: null
    variable_loss_scaling:
      default: 1
      pl:
        q: 0.6
        t: 6
        u: 0.8
        v: 0.5
        w: 0.001
        z: 12
      sfc:
        sp: 10
        10u: 0.1
        10v: 0.1
        2d: 0.5
        tp: 0.025
        cp: 0.0025

    pressure_level_scaler:
      _target_: anemoi.training.data.scaling.ReluPressureLevelScaler
      minimum: 0.2
      slope: 0.001

    node_loss_weights:
      _target_: anemoi.training.losses.nodeweights.GraphNodeAttribute
      target_nodes: ${graph.data}
      node_attribute: area_weight

    validation_metrics:
      - _target_: anemoi.training.losses.mse.WeightedMSELoss
        scalars: []
        ignore_nans: True
    scale_validation_metrics:
      scalars_to_apply: ['variable']
      metrics:
        - 'all'

    metrics:
      - z_500
      - t_850
      - u_850
      - v_850


submodules_to_freeze: []

