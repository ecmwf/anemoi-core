prefetch_factor: 2
pin_memory: True

# ============
# read_group_size:
#   Form subgroups of model comm groups that read data together.
#   Each reader in the group only reads 1/read_group_size of the data
#   which is then all-gathered between the group.
#   This can reduce CPU memory usage as well as increase dataloader throughput.
#   The number of GPUs per model must be divisible by read_group_size.
#   To disable, set to 1.
# ============
read_group_size: ${hardware.num_gpus_per_model}

num_workers:
  training: 8
  validation: 8
  test: 8
batch_size:
  training: 2
  validation: 4
  test: 4

# ============
# Default effective batch_size for training is 16
# For the o96 resolution, default per-gpu batch_size is 2 (8 gpus required)
# The global lr is calculated as:
# global_lr = local_lr * num_gpus_per_node * num_nodes / gpus_per_model
# Assuming a constant effective batch_size, any change in the per_gpu batch_size
# should come with a rescaling of the local_lr to keep a constant global_lr
# ============

# runs only N training batches [N = integer | null]
# if null then we run through all the batches
limit_batches:
  training: null
  validation: null
  test: 20

# set a custom mask for grid points.
# Useful for LAM (dropping unconnected nodes from forcing dataset)
grid_indices:
  _target_: anemoi.training.data.grid_indices.FullGrid
  nodes_name: ${graph.data}

# ============
# Dataloader definitions
# These follow the anemoi-datasets patterns
# You can make these as complicated for merging as you like
# See https://anemoi-datasets.readthedocs.io
# ============

dataset: ${hardware.paths.data}/${hardware.files.dataset}
dataset_6hr: ${hardware.paths.data}/aifs-ea-an-oper-0001-mars-o96-1979-2023-6h-v8.zarr

training:
  dataset:
    join:
      -
        dataset: ${dataloader.dataset}
        start: 1979
        end: 2020
        frequency: ${data.frequency}
        drop:  ['sd']
      -
        dataset: ${dataloader.dataset_6hr}
        start: 1979
        end: 2020
        interpolate_frequency: ${data.frequency}
        drop:  []
        rename:
          tp: tp_6hr
          cp: cp_6hr
    adjust: dates
  start: 1979
  end: 2020
  reorder: {'q_50': 0, 'q_100': 1, 'q_150': 2, 'q_200': 3, 'q_250': 4, 'q_300': 5, 'q_400': 6, 'q_500': 7, 'q_600': 8, 'q_700': 9, 'q_850': 10, 'q_925': 11, 'q_1000': 12, 't_50': 13, 't_100': 14, 't_150': 15, 't_200': 16, 't_250': 17, 't_300': 18, 't_400': 19, 't_500': 20, 't_600': 21, 't_700': 22, 't_850': 23, 't_925': 24, 't_1000': 25, 'u_50': 26, 'u_100': 27, 'u_150': 28, 'u_200': 29, 'u_250': 30, 'u_300': 31, 'u_400': 32, 'u_500': 33, 'u_600': 34, 'u_700': 35, 'u_850': 36, 'u_925': 37, 'u_1000': 38, 'v_50': 39, 'v_100': 40, 'v_150': 41, 'v_200': 42, 'v_250': 43, 'v_300': 44, 'v_400': 45, 'v_500': 46, 'v_600': 47, 'v_700': 48, 'v_850': 49, 'v_925': 50, 'v_1000': 51, 'w_50': 52, 'w_100': 53, 'w_150': 54, 'w_200': 55, 'w_250': 56, 'w_300': 57, 'w_400': 58, 'w_500': 59, 'w_600': 60, 'w_700': 61, 'w_850': 62, 'w_925': 63, 'w_1000': 64, 'z_50': 65, 'z_100': 66, 'z_150': 67, 'z_200': 68, 'z_250': 69, 'z_300': 70, 'z_400': 71, 'z_500': 72, 'z_600': 73, 'z_700': 74, 'z_850': 75, 'z_925': 76, 'z_1000': 77, 'z': 78, 'sp': 79, 'msl': 80, 'lsm': 81, 'sdor': 82, 'slor': 83, '10u': 84, '10v': 85, '2t': 86, '2d': 87, 'skt': 88, 'tcw': 89, 'cp': 90, 'tp': 91, 'cos_latitude': 92, 'cos_longitude': 93, 'sin_latitude': 94, 'sin_longitude': 95, 'cos_julian_day': 96, 'cos_local_time': 97, 'sin_julian_day': 98, 'sin_local_time': 99, 'insolation': 100, 'cp_6hr': 101, 'tp_6hr': 102}

validation_rollout: 1 # number of rollouts to use for validation, must be equal or greater than rollout expected by callbacks

validation:
  dataset:
    join:
      -
        dataset: ${dataloader.dataset}
        start: 2021
        end: 2021
        frequency: ${data.frequency}
        drop:  ['sd']
      -
        dataset: ${dataloader.dataset_6hr}
        start: 2021
        end: 2021
        interpolate_frequency: ${data.frequency}
        drop:  []
        select: [tp, cp]
        rename:
          tp: tp_6hr
          cp: cp_6hr
    adjust: dates
  start: 2021
  end: 2021
  reorder: {'q_50': 0, 'q_100': 1, 'q_150': 2, 'q_200': 3, 'q_250': 4, 'q_300': 5, 'q_400': 6, 'q_500': 7, 'q_600': 8, 'q_700': 9, 'q_850': 10, 'q_925': 11, 'q_1000': 12, 't_50': 13, 't_100': 14, 't_150': 15, 't_200': 16, 't_250': 17, 't_300': 18, 't_400': 19, 't_500': 20, 't_600': 21, 't_700': 22, 't_850': 23, 't_925': 24, 't_1000': 25, 'u_50': 26, 'u_100': 27, 'u_150': 28, 'u_200': 29, 'u_250': 30, 'u_300': 31, 'u_400': 32, 'u_500': 33, 'u_600': 34, 'u_700': 35, 'u_850': 36, 'u_925': 37, 'u_1000': 38, 'v_50': 39, 'v_100': 40, 'v_150': 41, 'v_200': 42, 'v_250': 43, 'v_300': 44, 'v_400': 45, 'v_500': 46, 'v_600': 47, 'v_700': 48, 'v_850': 49, 'v_925': 50, 'v_1000': 51, 'w_50': 52, 'w_100': 53, 'w_150': 54, 'w_200': 55, 'w_250': 56, 'w_300': 57, 'w_400': 58, 'w_500': 59, 'w_600': 60, 'w_700': 61, 'w_850': 62, 'w_925': 63, 'w_1000': 64, 'z_50': 65, 'z_100': 66, 'z_150': 67, 'z_200': 68, 'z_250': 69, 'z_300': 70, 'z_400': 71, 'z_500': 72, 'z_600': 73, 'z_700': 74, 'z_850': 75, 'z_925': 76, 'z_1000': 77, 'z': 78, 'sp': 79, 'msl': 80, 'lsm': 81, 'sdor': 82, 'slor': 83, '10u': 84, '10v': 85, '2t': 86, '2d': 87, 'skt': 88, 'tcw': 89, 'cp': 90, 'tp': 91, 'cos_latitude': 92, 'cos_longitude': 93, 'sin_latitude': 94, 'sin_longitude': 95, 'cos_julian_day': 96, 'cos_local_time': 97, 'sin_julian_day': 98, 'sin_local_time': 99, 'insolation': 100, 'cp_6hr': 101, 'tp_6hr': 102}

test:
  dataset: ${dataloader.dataset}
  start: 2022
  end: null
  frequency: ${data.frequency}
  drop:  ['tp', 'cp','sd']
