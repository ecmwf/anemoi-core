prefetch_factor: 2
pin_memory: True

# ============
# read_group_size:
#   Form subgroups of model comm groups that read data together.
#   Each reader in the group only reads 1/read_group_size of the data
#   which is then all-gathered between the group.
#   This can reduce CPU memory usage as well as increase dataloader throughput.
#   The number of GPUs per model must be divisible by read_group_size.
#   To disable, set to 1.
# ============
read_group_size: ${hardware.num_gpus_per_model}

num_workers:
  training: 8
  validation: 8
  test: 8
  predict: 8
batch_size:
  training: 2
  validation: 4
  test: 4
  predict: 4

# ============
# Default effective batch_size for training is 16
# For the o96 resolution, default per-gpu batch_size is 2 (8 gpus required)
# The global lr is calculated as:
# global_lr = local_lr * num_gpus_per_node * num_nodes / gpus_per_model
# Assuming a constant effective batch_size, any change in the per_gpu batch_size
# should come with a rescaling of the local_lr to keep a constant global_lr
# ============

# runs only N training batches [N = integer | null]
# if null then we run through all the batches
limit_batches:
  training: null
  validation: null
  test: 20
  predict: 20

# ============
# Dataloader definitions
# These follow the anemoi-datasets patterns
# You can make these as complicated for merging as you like
# See https://anemoi-datasets.readthedocs.io
# ============

grid_indices:
  _target_: anemoi.training.data.grid_indices.FullGrid
  nodes_name: ${graph.data}

dataset: ${hardware.paths.data}/${hardware.files.dataset}

training:
  dataset:
  - dataset: ${hardware.paths.data}/${hardware.files.dataset}
    start: null
    end: 2022
    frequency: ${data.frequency}
    # drop:  []
    # select: [tp, cp, t_850, z, 10u, 10v, u_850, v_850, q_850, z_850, sdor, slor, lsm, skt, 2t, 2d, sp, insolation]
    select: [tp, cp, z, t_925, u_925, v_925, q_925, z_925, sdor, slor, lsm, sp, insolation, cos_latitude, cos_longitude, sin_latitude, sin_longitude, cos_julian_day, cos_local_time, sin_julian_day, sin_local_time]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land}
    start: null
    end: 2022
    frequency: ${data.frequency}
    select: [ssrd, strd, sf]  # rsn, glacier_mask]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land_masked}
    start: null
    end: 2022
    frequency: ${data.frequency}
    select: [swvl1, swvl2, swvl3, stl1, stl2, stl3, ro, snowc, sd, cvh, cvl, tvh, tvl, slt, lai_lv, lai_hv, cl, glacier_mask]  # rsn, glacier_mask]
  start: null
  end: 2022
  drop: []

validation:
  dataset:
  - dataset: ${hardware.paths.data}/${hardware.files.dataset}
    start: 2023
    end: 2023
    frequency: ${data.frequency}
    # drop:  []
    # select: [tp, cp, t_850, z, 10u, 10v, u_850, v_850, q_850, z_850, sdor, slor, lsm, skt, 2t, 2d, sp, insolation]
    select: [tp, cp, z, t_925, u_925, v_925, q_925, z_925, sdor, slor, lsm, sp, insolation, cos_latitude, cos_longitude, sin_latitude, sin_longitude, cos_julian_day, cos_local_time, sin_julian_day, sin_local_time]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land}
    start: 2023
    end: 2023
    frequency: ${data.frequency}
    select: [ssrd, strd, sf]  # rsn, glacier_mask]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land_masked}
    start: 2023
    end: 2023
    frequency: ${data.frequency}
    select: [swvl1, swvl2, swvl3, stl1, stl2, stl3, ro, snowc, sd, cvh, cvl, tvh, tvl, slt, lai_lv, lai_hv, cl, glacier_mask]  # rsn, glacier_mask]
  start: 2023
  end: 2023
  drop: []

validation_rollout: 1 #Â number of rollouts to use for validation, must be equal or greater than rollout expected by callbacks

test:
  dataset:
  - dataset: ${hardware.paths.data}/${hardware.files.dataset}
    start: 2022
    end: null
    frequency: ${data.frequency}
    # drop:  []
    # select: [tp, cp, t_850, z, 10u, 10v, u_850, v_850, q_850, z_850, sdor, slor, lsm, skt, 2t, 2d, sp, insolation]
    select: [tp, cp, z, t_925, u_925, v_925, q_925, z_925, sdor, slor, lsm, sp, insolation, cos_latitude, cos_longitude, sin_latitude, sin_longitude, cos_julian_day, cos_local_time, sin_julian_day, sin_local_time]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land}
    start: 2022
    end: null
    frequency: ${data.frequency}
    select: [ssrd, strd, sf]  # rsn, glacier_mask]
  - dataset: ${hardware.paths.data}/${hardware.files.dataset_land_masked}
    start: 2022
    end: null
    frequency: ${data.frequency}
    select: [swvl1, swvl2, swvl3, stl1, stl2, stl3, ro, snowc, sd, cvh, cvl, tvh, tvl, slt, lai_lv, lai_hv, cl, glacier_mask]  # rsn, glacier_mask]
  start: 2022
  end: null
  drop: []
